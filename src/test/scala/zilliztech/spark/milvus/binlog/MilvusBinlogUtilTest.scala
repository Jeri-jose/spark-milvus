package zilliztech.spark.milvus.binlog

import org.junit.Test

class MilvusBinlogUtilTest {

  @Test
  @throws[Exception]
  def testHashInt64(): Unit = {
    assert(1669671676==MilvusBinlogUtil.HashInt64(0L))
    assert(1392991556==MilvusBinlogUtil.HashInt64(1L))
    assert(1857498428==MilvusBinlogUtil.HashInt64(10L))
    assert(1177227376==MilvusBinlogUtil.HashInt64(100L))
    assert(679959820==MilvusBinlogUtil.HashInt64(1000L))
    assert(1785225994==MilvusBinlogUtil.HashInt64(10000L))
    assert(258819970==MilvusBinlogUtil.HashInt64(100000L))
    assert(1669527334==MilvusBinlogUtil.HashInt64(1000000L))
    assert(112035536==MilvusBinlogUtil.HashInt64(10000000L))
    assert(107125476==MilvusBinlogUtil.HashInt64(100000000L))
    assert(913068403==MilvusBinlogUtil.HashInt64(1000000000L))
    assert(1151135==MilvusBinlogUtil.HashInt64(10000000000L))
    assert(2136277055==MilvusBinlogUtil.HashInt64(100000000000L))
    assert(636570700==MilvusBinlogUtil.HashInt64(1000000000000L))
    assert(469485073==MilvusBinlogUtil.HashInt64(10000000000000L))
    assert(745519692==MilvusBinlogUtil.HashInt64(100000000000000L))
    assert(1724407835==MilvusBinlogUtil.HashInt64(1000000000000000L))
    assert(2022854314==MilvusBinlogUtil.HashInt64(10000000000000000L))
    assert(1713940411==MilvusBinlogUtil.HashInt64(100000000000000000L))
    assert(2117120843==MilvusBinlogUtil.HashInt64(1000000000000000000L))
  }

  @Test
  @throws[Exception]
  def testHashString(): Unit = {
    assert(2044517703==MilvusBinlogUtil.HashString("ok"))
    assert(1267612143==MilvusBinlogUtil.HashString("abcdef"))
    val longText = "Milvus was created in 2019 with a singular goal: store, index, and manage massive embedding vectors generated by deep neural networks and other machine learning (ML) models.\n\nAs a database specifically designed to handle queries over input vectors, it is capable of indexing vectors on a trillion scale. Unlike existing relational databases which mainly deal with structured data following a pre-defined pattern, Milvus is designed from the bottom-up to handle embedding vectors converted from unstructured data.\n\nAs the Internet grew and evolved, unstructured data became more and more common, including emails, papers, IoT sensor data, Facebook photos, protein structures, and much more. In order for computers to understand and process unstructured data, these are converted into vectors using embedding techniques. Milvus stores and indexes these vectors. Milvus is able to analyze the correlation between two vectors by calculating their similarity distance. If the two embedding vectors are very similar, it means that the original data sources are similar as well."
    val hash = MilvusBinlogUtil.HashString(longText)
    assert(2922592797L==hash)
  }
}
